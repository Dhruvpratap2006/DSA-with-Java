Print the max sub array sum

// first approach
public class Max_Sub_Array_Sum {

  public static void getMaxSum(int numbers[]){
    int currSum = 0;
    int maxSum = Integer.MIN_VALUE;

    for(int i = 0; i < numbers.length; i++){
      int start = i;

      for(int j = i; j < numbers.length; j++){
        int end = j;
        currSum = 0;

        for(int k = start; k<= end; k++){
          currSum += numbers[k];
        }
        System.out.println( currSum);
        if(maxSum < currSum){
          maxSum = currSum;
        }
      }
      
    }
       System.out.println("Max sum is : " + maxSum);
  }

  public static void main(String[] args) {
    int numbers[] = {2 , 4,6,8,10};
    getMaxSum(numbers);
  }
}

// 2nd approach
Second approach (PREFIX APPROACH)
public class Prefix_Approach {

  public static void maxSubArray(int numbers[]){
    int prefix[] = new int[numbers.length];
    prefix[0] = numbers[0];
    int maxSum = Integer.MIN_VALUE;
    int currSum = 0;

    // Calculate prefix
    for(int i=1; i<prefix.length; i++){
      prefix[i] = prefix[i-1] + numbers[i];
    }
    for(int i=0; i<numbers.length; i++){
      int start = i;
      for(int j=i; j<numbers.length; j++){
        int end = j;
        currSum = (start == 0) ? (prefix[end]) : (prefix[end] - prefix[end-1]);
        if(maxSum < currSum){
          maxSum = currSum;
        }
      }
    }
    System.out.println("Max sum is : " + maxSum);
  }


  public static void main(String[] args) {
    int numbers[] = {1,-2,6,-1,3};
    maxSubArray(numbers);
  }
}
