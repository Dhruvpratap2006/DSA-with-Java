// 1st Approach using auxillary array
public class ARRAYS_ASSINGEMENT {

    public static int trappedRainWater(int height[]){
        int n = height.length;

        // Left max bound
        int leftMax[] = new int[n];
        leftMax[0] = height[0];
        for(int i = 1; i < n; i++){
            leftMax[i] = Math.max(leftMax[i-1] , height[i]);
        }

        // Right max bound
        int rightMax[] = new int[n];
        rightMax[n-1] = height[n-1];
        for(int i = n-2; i >= 0; i--){
            rightMax[i] = Math.max(rightMax[i+1], height[i]);
        }

        // Loop to calculate trapwater
        int trapwater = 0;
        for(int i = 0; i < n; i++){
            int waterlevel = Math.min(rightMax[i] , leftMax[i]);
            trapwater += waterlevel - height[i];
        }
        return trapwater;
    }

    public static void main(String[] args) {
        int height[] = {0,1,0,2,1,0,1,3,2,1,2,1};
        System.out.println(trappedRainWater(height));
    }
}

// 2nd Approach using Two Pointer
public class ARRAYS_ASSIGNMENT {

    public static int trappedRainWater(int height[]) {
        int n = height.length;
        int left = 0, right = n - 1;
        int leftMax = 0, rightMax = 0;
        int trapWater = 0;

        while (left <= right) {
            if (height[left] <= height[right]) {
                // work with left side
                if (height[left] >= leftMax) {
                    leftMax = height[left];
                } else {
                    trapWater += leftMax - height[left];
                }
                left++;
            } else {
                // work with right side
                if (height[right] >= rightMax) {
                    rightMax = height[right];
                } else {
                    trapWater += rightMax - height[right];
                }
                right--;
            }
        }
        return trapWater;
    }

    public static void main(String[] args) {
        int height[] = {0,1,0,2,1,0,1,3,2,1,2,1};
        System.out.println(trappedRainWater(height)); // Output: 6
    }
}
