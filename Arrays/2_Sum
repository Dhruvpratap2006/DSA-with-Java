// optimized with hash map


import java.util.Arrays;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        // brute force
        int n = nums.length;
        // for (int i = 0; i < n; i++) {
        //     for (int j = i + 1; j < n; j++) {
        //         if (nums[i] + nums[j] == target) {
        //             return new int[]{i, j}; // return 0-based indices
        //         }
        //     }
        // }

        // optimized -> using HashMap
        HashMap<Integer , Integer> map = new HashMap<>();

        for(int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if(map.containsKey(complement)) {
                return new int[] {map.get(complement) , i};
            }

            map.put(nums[i] , i);
        }
        return new int[]{-1, -1}; // if no pair found
    }
}
